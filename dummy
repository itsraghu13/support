https://learn.microsoft.com/en-us/answers/questions/705328/get-bearer-token-for-azure-management-api-using-da

https://learn.microsoft.com/en-us/answers/questions/659904/get-authorization-bearer-token-for-azure-managemen


https://medium.com/analytics-vidhya/azure-data-factory-retrieve-token-from-azure-ad-using-oauth-2-0-9a3ed3f55013


https://stackoverflow.com/questions/75230149/how-to-generate-bearer-token-via-azure-data-factory



https://login.microsoftonline.com/tenantid/oauth2/v2.0/token
Content-Type: application/x-www-form-urlencoded
tenant=tenantid&client_id=objectid(applicationid)&client_secret=clientsecret&grant_type=client_credentials&scope=https://graph.microsoft.com/.default


grant_type=client_credentials&client_id=xxxxxxx&client_secret=xxxxxx&resource=https://fourl.operations.dynamics.com

import requests
import json

def get_parent_id_recursive(input_id):
    # Construct request URL using input parameters
    pipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_GroupName}/providers/Microsoft.DataFactory/factories/{factory_name}/pipelineruns/{input_id}?api-version=2018-06-01"
    
    # Set headers with access token
    headers = {"Authorization": "Bearer " + access_token}
    
    # Send GET request to Azure API and load data into JSON object
    response = requests.get(pipelineRuns_URL, headers=headers)
    parameters_data = json.loads(response.text)
    
    # Initialize variables for parent ID and previous ID
    parent_id = None
    previous_id = None
    
    # Loop through JSON object and check for activity that invoked the current pipeline run
    for key, value in parameters_data.items():
        if key == "invokedBy" and value["invokedByType"] != "Manual":
            current_id = value['pipelineRunId']
            if previous_id is not None:
                parent_id = previous_id  # Assign the previous ID as the parent ID
            previous_id = current_id
            
            # Recursively call function to find the next parent ID
            parent_id = get_parent_id_recursive(current_id)
            break
        
    # If no parent activity is found or we reached the last level, return the current parent ID
    if parent_id is None:
        parent_id = previous_id
        
    return parent_id

parent_id = get_parent_id_recursive(input_id)
















def get_activity_output_data(activity_runs, pipeline_runId, pipelinename):
    """
    This function takes in a list of activity runs, a pipeline run ID, and a pipeline name.
    It filters the activity runs to only keep those with activityType "Copy".
    For each "Copy" activity, it extracts the output data ("rowsRead" or "dataRead") and creates a dictionary
    containing relevant information such as run ID, pipeline name, rows read/written, and activity name.
    The dictionaries are appended to a result list.
    At the end, the function returns the result list.
    """
    result = []
    for activity in activity_runs:
        if activity["activityType"] == "Copy":
            output = activity["output"]
            if "rowsRead" in output:
                rowsRead_data = {
                    "RunID": pipeline_runId,
                    "PipelineName": pipelinename,
                    "RowsRead": output["rowsRead"],
                    "RowsWritten": output["rowsCopied"],
                    "ActivityName": activity["activityName"]
                }
                result.append(rowsRead_data)
            elif "dataRead" in output:
                dataRead_data = {
                    "RunID": pipeline_runId,
                    "PipelineName": pipelinename,
                    "RowsRead": output["dataRead"],
                    "RowsWritten": output["dataWritten"],
                    "ActivityName": activity["activityName"]
                }
                result.append(dataRead_data)

    return result






import requests

def get_pipeline_runs(adf_url: str, headers: dict) -> list:
    """
    Sends a POST request to the Azure Data Factory API to retrieve pipeline runs.
    
    Args:
    adf_url (str): The Azure Data Factory URL to send the request to.
    headers (dict): The headers to include in the request.

    Returns:
    A list of pipeline runs retrieved from the API.
    """
    try:
        response = requests.post(adf_url, headers=headers)
        response.raise_for_status()
        return response.json()['value']
    except requests.exceptions.HTTPError as errh:
        print("HTTP error:", errh)
    except requests.exceptions.ConnectionError as errc:
        print("Connection error:", errc)
    except requests.exceptions.Timeout as errt:
        print("Timeout error:", errt)
    except requests.exceptions.RequestException as err:
        print("Oops! Something went wrong:", err)

# Define the ADF URL and headers
adf_url = 'https://<your-adf-name>.azuredatafactory.net/api/v1/PipelineRuns/QueryByFactory'
headers = {
    'Authorization': 'Bearer <your-token>',
    'Content-Type': 'application/json'
}

# Get pipeline runs
pipeline_runs = get_pipeline_runs(adf_url, headers)















import requests

def get_pipeline_runs(adf_url: str, headers: dict) -> list:
    """
    Sends a POST request to the Azure Data Factory API to retrieve pipeline runs.
    
    Args:
    adf_url (str): The Azure Data Factory URL to send the request to.
    headers (dict): The headers to include in the request.

    Returns:
    A list of pipeline runs retrieved from the API.
    """
    response = requests.post(adf_url, headers=headers)
    if response.status_code != 200:
        print(f"ERROR: Request failed with status {response.status_code}")
        return []
    return response.json()['value']

# Define the ADF URL and headers
adf_url = 'https://<your-adf-name>.azuredatafactory.net/api/v1/PipelineRuns/QueryByFactory'
headers = {
    'Authorization': 'Bearer <your-token>',
    'Content-Type': 'application/json'
}

# Get pipeline runs
pipeline_runs = get_pipeline_runs(adf_url, headers)











def get_parent_id_recursive(parameters_data, pipeline_runId):
    parent_id = None
    current_id = None
    
    for key, value in parameters_data.items():
        if key == "invokedBy":
            if value['invokedByType'] != "Manual":
                current_id = value['pipelineRunId']
                parent_id, current_id = get_parent_id_recursive(parameters_data, current_id)
            else:
                parent_id = pipeline_runId
                
    return parent_id, current_id




for item in data:
    pipeline_runs = get_pipeline_runs(adf_url, headers)
    result = get_activity_output_data(pipeline_runs, item['run_id'], item['pipelineName'])
    parent_id, current_id = get_parent_id_recursive(result['parameters'], item['run_id'])
    print(parent_id)
















# Define the URL to fetch pipeline runs
adf_url = "https://management.azure.com/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Datafactory/factories/{}/pipelineruns".format(
    subscription_id, resource_GroupName, factory_name)

# Define the headers for authorization
headers = {
    "Authorization": "Bearer {}".format(access_token)
}

# Loop through the data list and process each item
for item in data:
    
    # Get the pipeline runs
    pipeline_runs = get_pipeline_runs(adf_url, headers, item['run_id'], last_updated_after, last_updated_before, item['pipelineName'])
    
    # Get the result of the activity output data
    result = get_activity_output_data(pipeline_runs, item['run_id'], item['pipelineName'])
    
    # Get the parent run id recursively
    parent_runid = get_parent_id_recursive(item['run_id'], pipeline_runs)
    
    # Print the parent run id
    print(parent_runid)
    
    # If there is a parent run id, define the schema with additional column
    if parent_runid:
        schema = StructType([
            StructField("ActivityName", StringType(), True),
            StructField("PipelineName", StringType(), True),
            StructField("RowsRead", LongType(), True),
            StructField("RowsWritten", LongType(), True),
            StructField("RunID", StringType(), True),
            StructField("Parent_RunId", StringType(), True)
        ])
    else:
        schema = StructType([
            StructField("ActivityName", StringType(), True),
            StructField("PipelineName", StringType(), True),
            StructField("RowsRead", LongType(), True),
            StructField("RowsWritten", LongType(), True),
            StructField("RunID", StringType(), True)
        ])
    
    # Create a Spark dataframe from the result and schema
    if result:
        df = spark.createDataFrame(result, schema=schema)
    else:
        df = spark.createDataFrame([(None, item['pipelineName'], None, None, item['run_id'])], schema=schema)
    
    # Add parent_runid column to the dataframe
    if parent_runid:
        df = df.withColumn("Parent_RunId", lit(parent_runid[0]))
    
    # Write the dataframe to delta table
    df.write.format("delta").mode("append").option("overwriteSchema", "true").saveAsTable('structured.t_child_rgv')


















def get_parent_id_recursive(pipeline_runId):
    response = requests.get(adf_url, headers=headers)
    parameters_data = json.loads(response.text)

    parent_id = None
    current_id = None

    # Loop through the items in the parameters_data dictionary
    for key, value in parameters_data.items():
        if key == "invokedBy":
            if value['invokedByType'] != "Manual":
                current_id = value['pipelineRunId']
                break

    # If a current_id was found, call the function recursively with that id and update the parent_id
    if current_id:
        parent_id, _ = get_parent_id_recursive(current_id)
    else:
        parent_id = pipeline_runId
    
    return parent_id, current_id
    
    
    
    
    
    
    
    
    
    
    def get_activity_output_data(activity_runs, pipeline_runId, pipelinename):
    """
    This function takes in a list of activity runs, a pipeline run ID, and a pipeline name.
    It filters the activity runs to only keep those with activityType "Copy".
    For each "Copy" activity, it extracts the output data ("rowsRead" or "dataRead") and creates a dictionary
    containing relevant information such as run ID, pipeline name, rows read/written, and activity name.
    The dictionaries are appended to a result list.
    At the end, the function returns the result list.
    """
    result = []
    for activity in activity_runs:
        if "activityType" in activity and activity["activityType"] == "Copy":
            output = activity["output"]
            if "rowsRead" in output:
                rowsRead_data = {
                    "RunID": pipeline_runId,
                    "PipelineName": pipelinename,
                    "RowsRead": output["rowsRead"],
                    "RowsWritten": output["rowsCopied"],
                    "ActivityName": activity["activityName"]
                }
                result.append(rowsRead_data)
            elif "dataRead" in output:
                dataRead_data = {
                    "RunID": pipeline_runId,
                    "PipelineName": pipelinename,
                    "RowsRead": output["dataRead"],
                    "RowsWritten": output["dataWritten"],
                    "ActivityName": activity["activityName"]
                }
                result.append(dataRead_data)

    return result









def get_parent_id_recursive(adf_url, headers, pipeline_runId):
    response = requests.get(adf_url, headers=headers)
    parameters_data = json.loads(response.text)

    parent_id = None
    current_id = None

    # Loop through the items in the parameters_data dictionary
    for key, value in parameters_data.items():
        if key == "invokedBy":
            if value['invokedByType'] != "Manual":
                current_id = value['pipelineRunId']
                break

    # If a current_id was found, call the function recursively with that id and update the parent_id
    if current_id:
        parent_id, _ = get_parent_id_recursive(adf_url, headers, current_id)
    else:
        parent_id = pipeline_runId
    
    return parent_id








def get_parent_id_recursive(adf_url, headers, pipeline_runId):
    response = requests.post(adf_url, headers=headers)
    parameters_data_list = response.json()['value']
    parent_id = None
    current_id = None

    # Loop through the items in the parameters_data_list 
    for parameters_data in parameters_data_list:
        for key, value in parameters_data.items():
            if key == "invokedBy":
                if value['invokedByType'] != "Manual":
                    current_id = value['pipelineRunId']
                    break

        # If a current_id was found, call the function recursively with that id and update the parent_id
        if current_id:
            parent_id, _ = get_parent_id_recursive(adf_url, headers, current_id)
        else:
            parent_id = pipeline_runId

    return parent_id


















import requests
import json

def get_parent_id_recursive(ID, subscription_id, resource_GroupName, factory_name, access_token, previous_id=None):
    api_version = '2018-06-01'
    adf_url = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_GroupName}/providers/Microsoft.DataFactory/factories/{factory_name}/pipelineruns/{ID}?api-version={api_version}"
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(adf_url, headers=headers)
    parameters_data = json.loads(response.text)

    parent_id = None
    current_id = None
    for key, value in parameters_data.items():
        if key == "invokedBy":
            if value['invokedByType'] != "Manual":
                current_id = value['pipelineRunId']
                if current_id == previous_id:
                    # If we've already processed the current ID, break out of the loop
                    parent_id = current_id
                    break
                else:
                    parent_id, current_id = get_parent_id_recursive(current_id, subscription_id, resource_GroupName, factory_name, access_token, previous_id=ID)
                    parent_id = parent_id if parent_id is not None else current_id
                    break

    # If no current_id was found to match ID, return ID itself as parent_id
    parent_id = parent_id if parent_id is not None else ID

    return parent_id, current_id
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    def get_parent_id_recursive(ID):
    adf_url = "https://management.azure.com/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DataFactory/factories/{2}/pipelineruns/{3}?api-version=2018-06-01".format(subscription_id, resource_GroupName, factory_name, ID)
    headers = {"Authorization": "Bearer " + access_token}
    response = requests.get(adf_url, headers=headers)
    parameters_data = json.loads(response.text)
    parent_id = None
    current_id = None
    for key, value in parameters_data.items():
        if key == "invokedBy":
            if value['invokedByType'] != "Manual":
                current_id = value['pipelineRunId']
                parent_id_temp, current_id_temp = get_parent_id_recursive(current_id)
                parent_id = parent_id_temp or parent_id
                current_id = current_id_temp or current_id
            else:
                parent_id = ID
    return parent_id, current_id\
    
    
    
    
    
    
    
    
    
    
    
    def get_parent_id_recursive(current_id):
    adf_url = "https://management.azure.com/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DataFactory/factories/{2}/pipelineruns/{3}?api-version=2018-06-01".format(subscription_id, resource_GroupName, factory_name, current_id)
    headers = {"Authorization": "Bearer " + access_token}
    response = requests.get(adf_url, headers=headers)
    parameters_data = json.loads(response.text)
    parent_id = None
    for key, value in parameters_data.items():
        if key == "invokedBy":
            if value['invokedByType'] != "Manual":
                current_id = value['pipelineRunId']
                parent_id = get_parent_id_recursive(current_id)
                break
            else:
                parent_id = current_id
                break
    return parent_id






















total_list = [f.path for f in dbutils.fs.ls(raw_path) if f.name.endswith('/') or 'FID' in f.name]



def adls_path(path):
    total_list = []
    stack = [path]
    
    while stack:
        current_path = stack.pop()
        files = dbutils.fs.ls(current_path)
        
        for f in files:
            if f.name.endswith('/'):
                stack.append(f.path)
            elif 'FID' in f.name:
                total_list.append(f.path)
    
    return total_list

result = adls_path(raw_path)











import requests
import json

def get_parent_id_recursive(input_id):
    # Construct request URL using input parameters
    pipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_GroupName}/providers/Microsoft.DataFactory/factories/{factory_name}/pipelineruns/{input_id}?api-version=2018-06-01"
    
    # Set headers with access token
    headers = {"Authorization": "Bearer " + access_token}
    
    # Send GET request to Azure API and load data into JSON object
    response = requests.get(pipelineRuns_URL, headers=headers)
    parameters_data = json.loads(response.text)
    
    # Loop through JSON object and check for activity that invoked the current pipeline run
    while "invokedBy" in parameters_data and parameters_data["invokedBy"]["invokedByType"] != "Manual":
        # Update input ID to pipeline run ID of invoking activity
        input_id = parameters_data["invokedBy"]["pipelineRunId"]
        
        # Send new GET request with updated input ID
        pipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_GroupName}/providers/Microsoft.DataFactory/factories/{factory_name}/pipelineruns/{input_id}?api-version=2018-06-01"
        response = requests.get(pipelineRuns_URL, headers=headers)
        parameters_data = json.loads(response.text)
        
    # Return the top-level parent ID
    return input_id























if pipeline_runs is not None:
    # Get Copy Activity details
    result = get_activity_output_data(pipeline_runs, item['run_id'])
    # Get parent id for given run_id
    P_id = get_parent_id_recursive(item['run_id'])
    
    if result:
        df = spark.createDataFrame(result, schema)
    else:
        df = spark.createDataFrame(None, item['pipelineName*'], None, None, None,
                                   None, item['run_id*'], schema=schema)

    if P_id:
        df = df.withColumn("Parent_RunId", lit(P_id))
    
    df_parameters_data = get_parameters_data(item['run_id'])
    delta_table_name = 'structured.t_meta_copyactivities'
      
    # Check if Delta table exists and upsert data accordingly.
    if spark.catalog._jcatalog.tableExists(delta_table_name):
        existing_df = spark.read.format("delta").load(delta_table_name).filter(col("run_id") == item['run_id'])
        if existing_df.count() > 0:
            merged_df = existing_df.unionAll(df).dropDuplicates(['run_id', 'timestamp']) \
                          .withColumn("Parent_RunId", when(col("Parent_RunId").isNull(), df.select("Parent_RunId").first()[0])
                                                .otherwise(existing_df.select("Parent_RunId").first()[0]))
            merged_df.write.format("delta").mode("overwrite").option("overwriteSchema", "true").saveAsTable(delta_table_name)
        else:
            df.write.format("delta").mode("append").option("overwriteSchema", "true").saveAsTable(delta_table_name)
    else:
        df.write.format("delta").mode("append").option("overwriteSchema", "true").saveAsTable(delta_table_name)
        
        
        
        
        
        
        
        
        













queryPipelineRuns_URL = ("https://management.azure.com/subscriptions/{subscription_id}/"
                         "resourceGroups/{resource_GroupName}/providers/Microsoft.DataFactory/"
                         "factories/{factory_name}/queryPipelineRuns?api-version=2018-06-01")

headers = {'Authorization': 'Bearer ' + access_token}

data = []

while True:
    response = requests.post(queryPipelineRuns_URL.format(subscription_id=subscription_id,
                                                          resource_GroupName=resource_GroupName,
                                                          factory_name=factory_name),
                             headers=headers)

    pipeline_runs = response.json()['value']
    data.extend(pipeline_runs)
    
    continuation_token = response.json().get('continuationToken')
    if not continuation_token:
        break
    
    queryPipelineRuns_URL += '&continuationToken=' + continuation_token

print(f"Retrieved {len(data)} pipeline runs")


