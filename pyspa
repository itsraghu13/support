import os
import re
import multiprocessing
from functools import partial

folder_path = r"C:\path\to\your\folder"
search_pattern = r'.*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*'
sample_size = 10

def search_chunk(chunk_lines):
    matching_lines = []
    for line in chunk_lines:
        if re.match(search_pattern, line):
            matching_lines.append(line.strip())
    return matching_lines

def main():
    matching_files = []

    # Get the number of cores
    num_cores = multiprocessing.cpu_count()

    # Create a multiprocessing pool
    with multiprocessing.Pool(num_cores) as pool:
        # Iterate over the files
        for file_name in os.listdir(folder_path):
            if file_name.endswith(".txt"):
                file_path = os.path.join(folder_path, file_name)
                print(f"Processing {file_path}")

                matching_lines = []

                # Process the file in chunks
                with open(file_path, "r") as file:
                    while True:
                        chunk_lines = [next(file, None) for _ in range(sample_size)]
                        if not any(chunk_lines):  # Check if all lines are None
                            break

                        chunk_lines = [line for line in chunk_lines if line is not None]
                        
                        # Use the pool to search the chunk
                        search_func = partial(search_chunk, chunk_lines)
                        chunk_matching_lines = pool.apply(search_func)

                        matching_lines.extend(chunk_matching_lines)

                if matching_lines:
                    print(f"Matching line(s) found in {file_path} (sample):")
                    for line in matching_lines:
                        print(line)
                    matching_files.append(file_path)

    if matching_files:
        print("Files containing matching lines:")
        for file_path in matching_files:
            print(file_path)
    else:
        print("No files containing matching lines found.")

if __name__ == "__main__":
    main()



























import os
import re
import multiprocessing

folder_path = r"C:\path\to\your\folder"
search_pattern = r'.*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*'

def search_file(file_path):
    matching_lines = []

    with open(file_path, "r") as file:
        for line in file:
            if re.match(search_pattern, line):
                matching_lines.append(line.strip())
    
    return matching_lines

def main():
    matching_files = []
    
    # Get the number of cores
    num_cores = multiprocessing.cpu_count()

    # Create a multiprocessing pool
    with multiprocessing.Pool(num_cores) as pool:
        # Iterate over the files and search them in parallel
        for file_name in os.listdir(folder_path):
            if file_name.endswith(".txt"):
                file_path = os.path.join(folder_path, file_name)

                # Use the pool to search the file
                matching_lines = pool.apply(search_file, [file_path])

                matching_files.append(matching_lines)

    if matching_files:
        print("Files containing matching lines:")
        for file_path in matching_files:
            print(file_path)
    else:
        print("No files containing matching lines found.")

if __name__ == "__main__":
    main()




















import os
import re

folder_path = r"C:\path\to\your\folder"
search_pattern = r'.*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*'

matching_files = []

for file_name in os.listdir(folder_path):
    if file_name.endswith(".txt"):
        file_path = os.path.join(folder_path, file_name)
        print(f"Searching in {file_path}")

        matching_lines = []

        with open(file_path, "r") as file:
            for line in file:
                if re.match(search_pattern, line):
                    matching_lines.append(line.strip())
        
        if matching_lines:
            print(f"Matching line(s) found in {file_path}:")
            for line in matching_lines:
                print(line)
            matching_files.append(file_path)

if matching_files:
    print("Files containing matching lines:")
    for file_path in matching_files:
        print(file_path)
else:
    print("No files containing matching lines found.")














import os
import re
import gzip
import tempfile

folder_path = r"C:\path\to\your\folder"
search_pattern = r'.*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*'
sample_size = 10

matching_files = []

for file_name in os.listdir(folder_path):
    if file_name.endswith(".gz"):
        file_path = os.path.join(folder_path, file_name)
        print(f"Processing {file_path}")

        temp_file = tempfile.NamedTemporaryFile(delete=False)
        
        try:
            with gzip.open(file_path, "rt") as gz_file:
                sample_lines = [next(gz_file) for _ in range(sample_size)]
                temp_file.writelines(sample_lines)
                temp_file.close()

            with open(temp_file.name, "r") as temp_sample:
                matching_lines = [line.strip() for line in temp_sample if re.match(search_pattern, line)]
            
            if matching_lines:
                print(f"Matching line(s) found in {file_path}:")
                for line in matching_lines:
                    print(line)
                matching_files.append(file_path)

        finally:
            os.unlink(temp_file.name)

if matching_files:
    print("Files containing matching lines:")
    for file_path in matching_files:
        print(file_path)
else:
    print("No files containing matching lines found.")




















import os
import re
import tempfile
import gzip

folder_path = r"C:\path\to\your\folder"
search_pattern = r'.*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*'
sample_size = 10

matching_files = []

for file_name in os.listdir(folder_path):
    if file_name.endswith(".gz"):
        file_path = os.path.join(folder_path, file_name)
        print(f"Processing {file_path}")

        # Create a temporary directory to extract and process the file
        with tempfile.TemporaryDirectory() as temp_dir:
            # Extract the .gz file to the temporary directory
            temp_file_path = os.path.join(temp_dir, file_name)
            with gzip.open(file_path, 'rb') as gz_file:
                with open(temp_file_path, 'wb') as temp_file:
                    temp_file.write(gz_file.read())

            # Read sample lines from the temp file and search for the pattern
            matching_lines = []
            with open(temp_file_path, "r") as temp_file:
                sample_lines = [next(temp_file) for _ in range(sample_size)]
                for line in sample_lines:
                    if re.match(search_pattern, line):
                        matching_lines.append(line.strip())
            
            if matching_lines:
                print(f"Matching line(s) found in {file_path} (sample):")
                for line in matching_lines:
                    print(line)
                matching_files.append(file_path)

if matching_files:
    print("Files containing matching lines:")
    for file_path in matching_files:
        print(file_path)
else:
    print("No files containing matching lines found.")



