import os
import re
import random
import gzip

folder_path = r"C:\path\to\your\folder"
search_pattern = r'.*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*'
sample_size = 2

def find_matching_rows(text, pattern):
    matches = re.finditer(pattern, text)

    matching_rows = []
    for match in matches:
        start = match.start()
        end = match.end()

        matching_rows.append(text[start:end])

    return matching_rows


def process_file(file_path):
    print(f"Processing {file_path}")

    with gzip.open(file_path, "r") as file:
        sampled_lines = random.sample(file.readlines(), sample_size)
        matching_rows = find_matching_rows("".join(sampled_lines), pattern)

        if matching_rows:
            print(f"Matching lines found in {file_path}:")
            for line in matching_rows:
                print(line)

    return True

def main():
    matching_files = []

    with multiprocessing.Pool() as pool:
        results = pool.map(process_file, os.listdir(folder_path))

    for result in results:
        if result:
            matching_files.append(result)

    if matching_files:
        print("Files containing matching lines:")
        for file_path in matching_files:
            print(file_path)
    else:
        print("No files containing matching lines found.")

if __name__ == "__main__":
    main()



















import os
import re
import random
import multiprocessing

folder_path = r"C:\path\to\your\folder"
search_pattern = r'.*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*'
sample_size = 2

def process_file(file_path):
    print(f"Processing {file_path}")

    with open(file_path, "r") as file:
        sampled_lines = random.sample(file.readlines(), sample_size)
        for line in sampled_lines:
            if re.match(search_pattern, line):
                print(f"Matching line found in {file_path}:")
                print(line.strip())
                return True

    return False

def main():
    matching_files = []

    with multiprocessing.Pool() as pool:
        results = pool.map(process_file, os.listdir(folder_path))

    for result in results:
        if result:
            matching_files.append(result)

    if matching_files:
        print("Files containing matching lines:")
        for file_path in matching_files:
            print(file_path)
    else:
        print("No files containing matching lines found.")

if __name__ == "__main__":
    main()

























import os
import re
import random

folder_path = r"C:\path\to\your\folder"
search_pattern = r'.*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*'
sample_size = 2

def process_file(file_path):
    print(f"Processing {file_path}")

    with open(file_path, "r") as file:
        sampled_lines = random.sample(file.readlines(), sample_size)
        for line in sampled_lines:
            if re.match(search_pattern, line):
                print(f"Matching line found in {file_path}:")
                print(line.strip())
                return True

    return False

matching_files = []

for file_name in os.listdir(folder_path):
    if file_name.endswith(".txt"):
        file_path = os.path.join(folder_path, file_name)
        if process_file(file_path):
            matching_files.append(file_path)

if matching_files:
    print("Files containing matching lines:")
    for file_path in matching_files:
        print(file_path)
else:
    print("No files containing matching lines found.")


























import os
import re
import multiprocessing

folder_path = r"C:\path\to\your\folder"
search_pattern = r'.*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*'

def process_file(file_path):
    matching_lines = []
    with open(file_path, "r") as file:
        for line in file:
            if re.match(search_pattern, line):
                matching_lines.append(line.strip())
    return matching_lines

def main():
    files = [os.path.join(folder_path, file_name) for file_name in os.listdir(folder_path) if file_name.endswith(".txt")]

    with multiprocessing.Pool() as pool:
        results = pool.map(process_file, files)

    matching_files = [file for file, lines in zip(files, results) if lines]
    
    if matching_files:
        print("Files containing matching lines:")
        for file in matching_files:
            print(file)
    else:
        print("No files containing matching lines found.")

if __name__ == "__main__":
    main()





















import os
import regex as re
import random

folder_path = r"C:\path\to\your\folder"
search_pattern = r'.*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*'
sample_size = 2

matching_files = []

for file_name in os.listdir(folder_path):
    if file_name.endswith(".txt"):
        file_path = os.path.join(folder_path, file_name)
        print(f"Processing {file_path}")

        with open(file_path, "r") as file:
            sampled_lines = random.sample(file.readlines(), sample_size)
            for line in sampled_lines:
                if re.match(search_pattern, line):
                    print(f"Matching line found in {file_path}:")
                    print(line.strip())
                    matching_files.append(file_path)
                    break

if matching_files:
    print("Files containing matching lines:")
    for file_path in matching_files:
        print(file_path)
else:
    print("No files containing matching lines found.")



















$folderPath = "C:\path\to\your\folder"
$searchPattern = '".*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*"'
$sampleSize = 2

$matchingFiles = @()

$files = Get-ChildItem -Path $folderPath -Filter *.txt

$files | ForEach-Object {
    $filePath = $_.FullName
    Write-Host "Processing $($filePath)"

    $sampledLines = @()
    $reader = [System.IO.File]::OpenText($filePath)

    while (!$reader.EndOfStream -and $sampledLines.Count -lt $sampleSize) {
        $line = $reader.ReadLine()
        if ($line -match $searchPattern) {
            $sampledLines += $line
        }
    }

    $reader.Close()

    if ($sampledLines.Count -gt 0) {
        Write-Host "Matching line(s) found in $($filePath):"
        $sampledLines | ForEach-Object {
            Write-Host $_
        }
        $matchingFiles += $_
    }
}

if ($matchingFiles.Count -gt 0) {
    Write-Host "Files containing matching lines:"
    $matchingFiles | ForEach-Object {
        Write-Host $_.FullName
    }
} else {
    Write-Host "No files containing matching lines found."
}























$folderPath = "C:\path\to\your\folder"
$searchPattern = '".*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*"'
$sampleSize = 100

$files = Get-ChildItem -Path $folderPath -Filter *.txt | Where-Object {
    $sampledLines = Get-Content $_.FullName | Get-Random -Count $sampleSize
    $matchFound = $sampledLines -match $searchPattern
    $matchFound.Count -gt 0
}

if ($files.Count -gt 0) {
    Write-Host "Files containing matching lines:"
    $files | ForEach-Object {
        Write-Host $_.FullName
    }
} else {
    Write-Host "No files containing matching lines found."
}










$folderPath = "C:\path\to\your\folder"
$searchPattern = '".*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*"'

$files = Get-ChildItem -Path $folderPath -Filter *.txt | Where-Object {
    $text = Get-Content $_.FullName
    $text -match $searchPattern
}

if ($files.Count -gt 0) {
    Write-Host "Files containing matching lines:"
    $files | ForEach-Object {
        Write-Host $_.FullName
    }
} else {
    Write-Host "No files containing matching lines found."
}
























$folderPath = "C:\path\to\your\folder"
$searchPattern = '".*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*"'

$matchingFiles = @()

Get-ChildItem -Path $folderPath -Filter *.txt | ForEach-Object {
    $filePath = $_.FullName
    Write-Host "Searching in $($filePath)"

    $reader = [System.IO.File]::OpenText($filePath)
    while (($line = $reader.ReadLine()) -ne $null) {
        if ($line -match $searchPattern) {
            Write-Host "Matching line found in $($filePath):"
            Write-Host $line
            $matchingFiles += $_
            break
        }
    }
    $reader.Close()
}

if ($matchingFiles.Count -gt 0) {
    Write-Host "Files containing matching lines:"
    $matchingFiles | ForEach-Object {
        Write-Host $_.FullName
    }
} else {
    Write-Host "No files containing matching lines found."
}





$folderPath = "C:\path\to\your\folder"
$searchPattern = '".*(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}|\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}Z).*"'

$hashTable = @{}

Get-ChildItem -Path $folderPath -Filter *.txt | ForEach-Object {
    $filePath = $_.FullName
    Write-Host "Searching in $($filePath)"

    $matchingLines = Get-Content $filePath -ReadCount 1000 | Select-String -Pattern $searchPattern
    
    foreach ($matchingLine in $matchingLines) {
        $hashTable[$matchingLine.Line] = $filePath
    }
}

$matchingFiles = $hashTable.Keys | Sort-Object

if ($matchingFiles.Count -gt 0) {
    Write-Host "Files containing matching lines:"
    $matchingFiles | ForEach-Object {
        Write-Host $_
    }
} else {
    Write-Host "No files containing matching lines found."
}

