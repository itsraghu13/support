import asyncio
import aiohttp

async def fetch_pipeline_runs(session, url):
    async with session.post(url) as response:
        return await response.json()

async def get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, last_updated_after, last_updated_before):
    queryPipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.DataFactory/factories/{factory_name}/queryPipelineRuns?api-version=2018-06-01&lastUpdatedAfter={last_updated_after}&lastUpdatedBefore={last_updated_before}"
    
    headers = {'Authorization': 'Bearer ' + access_token}
    
    async with aiohttp.ClientSession(headers=headers) as session:
        response = await fetch_pipeline_runs(session, queryPipelineRuns_URL)
        pipeline_runs = response.get('value', [])
        data = [{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs]

        continuation_token = response.get('continuationToken')

        while continuation_token:
            url_with_token = queryPipelineRuns_URL + f"&continuationToken={continuation_token}"
            response = await fetch_pipeline_runs(session, url_with_token)
            pipeline_runs = response.get('value', [])
            data.extend([{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs])
            continuation_token = response.get('continuationToken')

    return data

# Call the function
pipeline_runs = asyncio.run(get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, last_updated_after, last_updated_before))
