import requests

def fetch_pipeline_runs(url, headers):
    response = requests.post(url, headers=headers)
    return response.json()

def get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, last_updated_after, last_updated_before):
    queryPipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.DataFactory/factories/{factory_name}/queryPipelineRuns?api-version=2018-06-01&lastUpdatedAfter={last_updated_after}&lastUpdatedBefore={last_updated_before}"
    
    headers = {'Authorization': 'Bearer ' + access_token}

    response = fetch_pipeline_runs(queryPipelineRuns_URL, headers)
    pipeline_runs = response.get('value', [])
    data = [{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs]

    continuation_token = response.get('continuationToken')

    while continuation_token:
        url_with_token = queryPipelineRuns_URL + f"&continuationToken={continuation_token}"
        response = fetch_pipeline_runs(url_with_token, headers)
        pipeline_runs = response.get('value', [])
        data.extend([{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs])
        continuation_token = response.get('continuationToken')

    return data

# Call the function
pipeline_runs = get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, last_updated_after, last_updated_before)








import requests

def fetch_pipeline_runs(url, headers):
    response = requests.post(url, headers=headers)
    return response.json()

def get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time):
    queryPipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.DataFactory/factories/{factory_name}/queryPipelineRuns?api-version=2018-06-01&$filter=runStart ge '{start_time}' and runEnd le '{end_time}'"
    
    headers = {'Authorization': 'Bearer ' + access_token}

    response = fetch_pipeline_runs(queryPipelineRuns_URL, headers)
    pipeline_runs = response.get('value', [])
    data = [{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs]

    continuation_token = response.get('continuationToken')

    while continuation_token:
        url_with_token = queryPipelineRuns_URL + f"&continuationToken={continuation_token}"
        response = fetch_pipeline_runs(url_with_token, headers)
        pipeline_runs = response.get('value', [])
        filtered_runs = [{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs if start_time <= run['runStart'] <= end_time and start_time <= run['runEnd'] <= end_time]
        data.extend(filtered_runs)
        continuation_token = response.get('continuationToken')

    return data

# Call the function
pipeline_runs = get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time)

