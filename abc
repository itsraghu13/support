import requests

def fetch_pipeline_runs(url, headers):
    response = requests.post(url, headers=headers)
    return response.json()

def get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, last_updated_after, last_updated_before):
    queryPipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.DataFactory/factories/{factory_name}/queryPipelineRuns?api-version=2018-06-01&lastUpdatedAfter={last_updated_after}&lastUpdatedBefore={last_updated_before}"
    
    headers = {'Authorization': 'Bearer ' + access_token}

    response = fetch_pipeline_runs(queryPipelineRuns_URL, headers)
    pipeline_runs = response.get('value', [])
    data = [{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs]

    continuation_token = response.get('continuationToken')

    while continuation_token:
        url_with_token = queryPipelineRuns_URL + f"&continuationToken={continuation_token}"
        response = fetch_pipeline_runs(url_with_token, headers)
        pipeline_runs = response.get('value', [])
        data.extend([{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs])
        continuation_token = response.get('continuationToken')

    return data

# Call the function
pipeline_runs = get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, last_updated_after, last_updated_before)








import requests

def fetch_pipeline_runs(url, headers):
    response = requests.post(url, headers=headers)
    return response.json()

def get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time):
    queryPipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.DataFactory/factories/{factory_name}/queryPipelineRuns?api-version=2018-06-01&$filter=runStart ge '{start_time}' and runEnd le '{end_time}'"
    
    headers = {'Authorization': 'Bearer ' + access_token}

    response = fetch_pipeline_runs(queryPipelineRuns_URL, headers)
    pipeline_runs = response.get('value', [])
    data = [{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs]

    continuation_token = response.get('continuationToken')

    while continuation_token:
        url_with_token = queryPipelineRuns_URL + f"&continuationToken={continuation_token}"
        response = fetch_pipeline_runs(url_with_token, headers)
        pipeline_runs = response.get('value', [])
        filtered_runs = [{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs if start_time <= run['runStart'] <= end_time and start_time <= run['runEnd'] <= end_time]
        data.extend(filtered_runs)
        continuation_token = response.get('continuationToken')

    return data

# Call the function
pipeline_runs = get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time)










import requests
from concurrent.futures import ThreadPoolExecutor

def fetch_pipeline_runs(url, headers):
    response = requests.post(url, headers=headers)
    return response.json()

def process_continuation_token(url, headers, start_time, end_time):
    response = fetch_pipeline_runs(url, headers)
    pipeline_runs = response.get('value', [])
    filtered_runs = [{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs if start_time <= run['runStart'] <= end_time and start_time <= run['runEnd'] <= end_time]
    return filtered_runs, response.get('continuationToken')

def get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time, batch_size=10, max_workers=10):
    queryPipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.DataFactory/factories/{factory_name}/queryPipelineRuns?api-version=2018-06-01&$filter=runStart ge '{start_time}' and runEnd le '{end_time}'"
    
    headers = {'Authorization': 'Bearer ' + access_token}

    response = fetch_pipeline_runs(queryPipelineRuns_URL, headers)
    pipeline_runs = response.get('value', [])
    data = [{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs]

    continuation_tokens = [response.get('continuationToken')]

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        while continuation_tokens:
            batch_tokens = continuation_tokens[:batch_size]
            continuation_tokens = continuation_tokens[batch_size:]

            urls_with_tokens = [queryPipelineRuns_URL + f"&continuationToken={token}" for token in batch_tokens]
            
            futures = []
            for url_with_token in urls_with_tokens:
                future = executor.submit(process_continuation_token, url_with_token, headers, start_time, end_time)
                futures.append(future)

            for future in futures:
                filtered_runs, token = future.result()
                data.extend(filtered_runs)
                if token:
                    continuation_tokens.append(token)

    return data

# Call the function
pipeline_runs = get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time)







import requests

def fetch_pipeline_runs(url, headers):
    response = requests.post(url, headers=headers)
    return response.json()

def get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time):
    queryPipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.DataFactory/factories/{factory_name}/queryPipelineRuns?api-version=2018-06-01&$filter=runStart ge '{start_time}' and runEnd le '{end_time}'"
    
    headers = {'Authorization': 'Bearer ' + access_token}

    continuation_token = None
    data = []

    while True:
        url = queryPipelineRuns_URL
        if continuation_token:
            url += f"&continuationToken={continuation_token}"

        response = fetch_pipeline_runs(url, headers)
        pipeline_runs = response.get('value', [])

        filtered_runs = [{'pipelineName': run['pipelineName'], 'runId': run['runId']} for run in pipeline_runs if start_time <= run['runStart'] <= end_time and start_time <= run['runEnd'] <= end_time]
        data.extend(filtered_runs)

        continuation_token = response.get('continuationToken')
        if not continuation_token:
            break

    return data

# Call the function
pipeline_runs = get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time)










import requests

def fetch_pipeline_runs(url, headers):
    response = requests.get(url, headers=headers)
    return response.json()

def get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time, access_token):
    queryPipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.DataFactory/factories/{factory_name}/queryPipelineRuns?api-version=2018-06-01&$filter=runStart ge '{start_time}' and runEnd le '{end_time}'"
    
    headers = {'Authorization': 'Bearer ' + access_token}

    continuation_token = None
    data = []

    while True:
        url = queryPipelineRuns_URL
        if continuation_token:
            url += f"&continuationToken={continuation_token}"

        response = fetch_pipeline_runs(url, headers)
        pipeline_runs = response.get('value', [])

        filtered_runs = [{'pipelineName': run['name'], 'runId': run['runId']} for run in pipeline_runs if start_time <= run['properties']['runStart'] <= end_time and start_time <= run['properties']['runEnd'] <= end_time]
        data.extend(filtered_runs)

        if 'continuationToken' in response:
            continuation_token = response['continuationToken']
        else:
            break

    return data

# Call the function
subscription_id = "your-subscription-id"
resource_group_name = "your-resource-group-name"
factory_name = "your-data-factory-name"
start_time = "2023-06-01T00:00:00Z"
end_time = "2023-06-30T23:59:59Z"
access_token = "your-access-token"

pipeline_runs = get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time, access_token)
print('Total pipeline runs retrieved:', len(pipeline_runs))
print(pipeline_runs)
















import requests

def fetch_pipeline_runs(url, headers):
    response = requests.get(url, headers=headers)
    return response.json()

def get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time, access_token):
    queryPipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.DataFactory/factories/{factory_name}/queryPipelineRuns?api-version=2018-06-01&$filter=runStart ge '{start_time}' and runEnd le '{end_time}'"
    
    headers = {'Authorization': 'Bearer ' + access_token}

    continuation_token = None
    data = []

    while True:
        url = queryPipelineRuns_URL
        if continuation_token:
            url += f"&continuationToken={continuation_token}"

        response = fetch_pipeline_runs(url, headers)

        if response.status_code == 200:
            try:
                pipeline_runs = response.json().get('value', [])
                filtered_runs = [{'pipelineName': run['name'], 'runId': run['runId']} for run in pipeline_runs if start_time <= run['properties']['runStart'] <= end_time and start_time <= run['properties']['runEnd'] <= end_time]
                data.extend(filtered_runs)

                if 'continuationToken' in response.json():
                    continuation_token = response.json()['continuationToken']
                else:
                    break

            except ValueError as e:
                print('Error parsing JSON:', e)
                print('Response content:', response.content)
                break

        else:
            print('Error occurred while making the API call. Status code:', response.status_code)
            print('Response content:', response.content)
            break

    return data

# Call the function
subscription_id = "your-subscription-id"
resource_group_name = "your-resource-group-name"
factory_name = "your-data-factory-name"
start_time = "2023-06-01T00:00:00Z"
end_time = "2023-06-30T23:59:59Z"
access_token = "your-access-token"

pipeline_runs = get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time, access_token)
if pipeline_runs:
    print('Total pipeline runs retrieved:', len(pipeline_runs))
    print(pipeline_runs)














import requests

def fetch_pipeline_runs(url, headers):
    response = requests.get(url, headers=headers)
    return response.json()

def get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time, access_token):
    queryPipelineRuns_URL = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.DataFactory/factories/{factory_name}/queryPipelineRuns?api-version=2018-06-01&$filter=runStart ge '{start_time}' and runEnd le '{end_time}'&$top=100"
    
    headers = {'Authorization': 'Bearer ' + access_token}

    offset = 0
    data = []

    while True:
        url = f"{queryPipelineRuns_URL}&$skip={offset}"

        response = fetch_pipeline_runs(url, headers)
        pipeline_runs = response.get('value', [])

        filtered_runs = [{'pipelineName': run['name'], 'runId': run['runId']} for run in pipeline_runs if start_time <= run['properties']['runStart'] <= end_time and start_time <= run['properties']['runEnd'] <= end_time]
        data.extend(filtered_runs)

        if len(pipeline_runs) < 100:
            break

        offset += 100

    return data

# Call the function
subscription_id = "your-subscription-id"
resource_group_name = "your-resource-group-name"
factory_name = "your-data-factory-name"
start_time = "2023-06-01T00:00:00Z"
end_time = "2023-06-30T23:59:59Z"
access_token = "your-access-token"

pipeline_runs = get_all_pipeline_runs(subscription_id, resource_group_name, factory_name, start_time, end_time, access_token)
print('Total pipeline runs retrieved:', len(pipeline_runs))
print(pipeline_runs)






